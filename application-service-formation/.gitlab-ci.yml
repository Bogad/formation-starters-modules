image: registry.devops.os/ci-tools/os-ci-docker:latest

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effåective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'

cache:
  key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME"
  paths:
    - .m2/repository

stages:
  - build
  - code-quality
#   - test
  - deploy


sonarqube:
  script:
    - mvn $MAVEN_CLI_OPTS compile sonar:sonar
  stage: code-quality
  only:
    - master


sonarqube_preview:
  script:
    - mvn $MAVEN_CLI_OPTS compile sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.analysis.mode=preview -Dsonar.gitlab.project_id=$CI_PROJECT_PATH -Dsonar.gitlab.commit_sha=$CI_BUILD_REF -Dsonar.gitlab.ref_name=$CI_BUILD_REF_NAME
  stage: code-quality
  only:
    - branches
  except:
    - master
    - /^hotfix_.*$/
    - /.*-hotfix$/
    - tags

# test failure due to a rest call to access-control

# test:
#   stage: test
#   script:
#     - mvn $MAVEN_CLI_OPTS clean test

build:
  stage: build
  script:
    - mvn package -DskipTests
  only:
    - branches
  artifacts:
    expire_in: 1 day
    paths:
      - target/*.jar


# skipping tests
master_build:
  stage: build
  script:
    - mvn package -Drevision=$CI_BUILD_TAG -DskipTests
  only:
    - tags
  artifacts:
    expire_in: 1 month
    paths:
      - target/*.jar


## IN CASE OF SERVICE
build-staging:
  stage: deploy
  image: docker:latest
  only:
    - master
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --build-arg JAR_FILE=target/*.jar -t $CI_REGISTRY_IMAGE:staging .
    - docker push $CI_REGISTRY_IMAGE:staging



## IN CASE OF SERVICE
build_image:
  stage: deploy
  image: docker:latest
  only:
    - tags
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --build-arg JAR_FILE=target/*.jar -t $CI_REGISTRY_IMAGE:$CI_BUILD_TAG .
    - docker push $CI_REGISTRY_IMAGE:$CI_BUILD_TAG

